{
  "compilerOptions": {
    "target": "ESNext", // 目标语言的版本
    "useDefineForClassFields": true,
    "module": "ESNext", // 生成代码的模板标准
    "moduleResolution": "Node", // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
    // vite/client 这个类型声明允许你在代码中使用 Vite 特定的类型，比如 import.meta 对象和运行时环境变量
    //element-plus/global 这个类型声明允许你在代码中使用 Element Plus 组件的类型，以获得类型检查和自动补全的支持。
    "types": ["vite/client", "element-plus/global"],

    /* Strict Type-Checking Options */
    "strict": true /* Enable all strict type-checking options. */,
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    "jsx": "preserve",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "lib": ["ESNext", "DOM"], // TS需要引用的库，即声明文件
    "skipLibCheck": true,
    "noEmit": true, // 不输出文件,即编译后不会生成任何js文件
    "baseUrl": "./", // 解析非相对模块的基地址，默认是当前目录
    "paths": {
      // 路径映射，相对于baseUrl
      "@": ["src"],
      "@/*": ["src/*"]
    }
  },
  //如果不是在src下或src文件下的xx.d.ts文件则需要在tsconfig.json中配置
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "build/**/*.ts",
    "build/**/*.d.ts",
    "vite.config.ts"
, "src/languages/modules/zh.ts", "src/languages/modules/en.ts"  ],
  "exclude": ["node_modules", "dist", "**/*.js"]
}
